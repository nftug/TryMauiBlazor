@using TryMauiBlazor.Services

@implements IDisposable

@inject LayoutService LayoutService
@inject NavigationService NavigationService

<MudAppBar Elevation="0" Fixed>
    @if (NavigationService.HasBackButton)
    {
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Inherit" Edge="Edge.Start" OnClick="@OnBackButtonClicked" />
    }
    else
    {
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggleCallback" />
    }

    <MudText Typo="Typo.h6" Class="ml-3">@NavigationService.Title</MudText>

    <MudSpacer />

    <MudTooltip Duration="1000" Text="@(LayoutService.IsDarkMode ? "Light mode" : "Dark mode")">
        <MudIconButton Icon="@(LayoutService.IsDarkMode ? @Icons.Rounded.LightMode : @Icons.Material.Outlined.DarkMode)"
                       Color="Color.Inherit" OnClick="@LayoutService.ToggleDarkMode" />
    </MudTooltip>
</MudAppBar>

@code {
    [Parameter]
    public EventCallback<MouseEventArgs> DrawerToggleCallback { get; set; }
    [Inject]
    private IJSRuntime JSRuntime { get; set; } = null!;

    protected override void OnInitialized()
    {
        NavigationService.TitleChanged += OnChangeState;
        NavigationService.BackButtonChanged += OnChangeState;
    }

    public void Dispose()
    {
        NavigationService.TitleChanged -= OnChangeState;
        NavigationService.BackButtonChanged -= OnChangeState;
    }

    public void OnChangeState() => InvokeAsync(StateHasChanged);

    public async void OnBackButtonClicked()
    {
        await JSRuntime.InvokeVoidAsync("history.back", -1);
    }
}
